from pm4py.objects.petri_net.importer import importer as pnml_importer
from pm4py.simulation.playout import simulator
from pm4py.algo.conformance.alignments.petri_net import algorithm as alignments
from pm4py.algo.evaluation.precision import algorithm as precision_evaluator
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator

# Carica i modelli
net_a, im_a, fm_a = pnml_importer.apply("birthCertificate_p32_var.pnml")
net_b, im_b, fm_b = pnml_importer.apply("birthCertificate_p32.pnml")

# Stampa transizioni visibili
print("Transizioni modello A:", [t.label for t in net_a.transitions if t.label])
print("Transizioni modello B:", [t.label for t in net_b.transitions if t.label])

# Simula log da modello A
simulated_log_a = simulator.apply(
    net_a,
    im_a,
    variant=simulator.Variants.BASIC_PLAYOUT,
    parameters={"max_trace_length": 15, "no_traces": 30}
)
print(f"Numero tracce simulate da modello A: {len(simulated_log_a)}")

# Simula log da modello B (per confronto)
simulated_log_b = simulator.apply(
    net_b,
    im_b,
    variant=simulator.Variants.BASIC_PLAYOUT,
    parameters={"max_trace_length": 15, "no_traces": 30}
)
print(f"Numero tracce simulate da modello B: {len(simulated_log_b)}")

# Calcolo fitness per ogni traccia del log simulato da A rispetto al modello B
results = alignments.apply(simulated_log_a, net_b, im_b, fm_b)
fitness_values = [res['fitness'] for res in results]
fitness_media = sum(fitness_values) / len(fitness_values)
print(f"Fitness media del log simulato da A rispetto a modello B: {fitness_media}")

# Calcolo precision rispetto al modello B sul log simulato da B (controllo)
precision_b_vs_b = precision_evaluator.apply(simulated_log_b, net_b, im_b, fm_b)
print("Precision rispetto al modello B (log simulato da B):", precision_b_vs_b)

# Calcolo generalizzazione rispetto al modello B
generalization = generalization_evaluator.apply(simulated_log_a, net_b, im_b, fm_b)
print("Generalization rispetto al modello B:", generalization)

# Calcolo semplicitÃ  del modello B
simplicity = simplicity_evaluator.apply(net_b)
print("Simplicity del modello B:", simplicity)

# Calcolo F1-score come media armonica tra fitness media e precision (log simulato da B)
if fitness_media + precision_b_vs_b > 0:
    f1_score = 2 * (precision_b_vs_b * fitness_media) / (precision_b_vs_b + fitness_media)
else:
    f1_score = 0.0

print("F1-score (log simulato da A vs modello B):", f1_score)
